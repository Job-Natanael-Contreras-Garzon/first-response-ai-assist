export interface EmergencyAnalysis {
  severity: 'low' | 'medium' | 'high' | 'critical';
  category: string;
  firstAid: string[];
  callAmbulance: boolean;
  additionalQuestions?: string[];
}

export class EmergencyAIService {
  private apiKey: string | null = null;

  setApiKey(key: string) {
    this.apiKey = key;
  }

  async analyzeEmergency(description: string): Promise<EmergencyAnalysis> {
    console.log('Analizando emergencia:', description);
    
    const lowerDesc = description.toLowerCase();
    
    // Herida de bala - Emergencia cr√≠tica
    if (lowerDesc.includes('disparo') || lowerDesc.includes('bala') || lowerDesc.includes('dispararon')) {
      return {
        severity: 'critical',
        category: 'Herida de Bala',
        firstAid: [
          'üö® EMERGENCIA CR√çTICA - Mant√©n la calma',
          'üìû Llama INMEDIATAMENTE al 911',
          'ü©∏ Aplica presi√≥n directa sobre la herida con ropa limpia',
          'üö´ NO remuevas la bala si est√° visible',
          '‚¨ÜÔ∏è Eleva la pierna por encima del coraz√≥n si es posible',
          'üí™ Mant√©n presi√≥n constante hasta que llegue la ambulancia',
          'üëÅÔ∏è Monitorea la consciencia de la persona',
          'ü´Å Verifica que la persona siga respirando'
        ],
        callAmbulance: true,
        additionalQuestions: [
          '¬øLa persona est√° consciente y puede hablar?',
          '¬øHay mucha p√©rdida de sangre?',
          '¬øPuede ver la bala o hay un orificio de salida?'
        ]
      };
    }
    
    // An√°lisis b√°sico por palabras clave
    if (lowerDesc.includes('corte') || lowerDesc.includes('sangre') || lowerDesc.includes('herida')) {
      return {
        severity: 'medium',
        category: 'Trauma/Herida',
        firstAid: [
          '1. Mant√©n la calma y eval√∫a la situaci√≥n',
          '2. Aplica presi√≥n directa sobre la herida con un pa√±o limpio',
          '3. Eleva la parte lesionada por encima del coraz√≥n si es posible',
          '4. No remuevas objetos incrustados en la herida',
          '5. Mant√©n la presi√≥n hasta que llegue ayuda m√©dica'
        ],
        callAmbulance: true
      };
    }
    
    if (lowerDesc.includes('dolor pecho') || lowerDesc.includes('coraz√≥n') || lowerDesc.includes('infarto')) {
      return {
        severity: 'critical',
        category: 'Emergencia Card√≠aca',
        firstAid: [
          '1. Llama inmediatamente a emergencias',
          '2. Ayuda a la persona a sentarse en posici√≥n c√≥moda',
          '3. Afloja la ropa ajustada',
          '4. Si la persona est√° consciente, dale aspirina si no es al√©rgica',
          '5. Prep√°rate para realizar RCP si la persona pierde el conocimiento'
        ],
        callAmbulance: true
      };
    }
    
    if (lowerDesc.includes('quemadura') || lowerDesc.includes('fuego') || lowerDesc.includes('calor')) {
      return {
        severity: 'medium',
        category: 'Quemadura',
        firstAid: [
          '1. Aleja a la persona de la fuente de calor',
          '2. Enfr√≠a la quemadura con agua fr√≠a durante 10-20 minutos',
          '3. No uses hielo, mantequilla o remedios caseros',
          '4. Cubre la quemadura con un pa√±o limpio y h√∫medo',
          '5. No rompas las ampollas que puedan formarse'
        ],
        callAmbulance: lowerDesc.includes('grave') || lowerDesc.includes('extensa')
      };
    }
    
    if (lowerDesc.includes('ca√≠da') || lowerDesc.includes('golpe') || lowerDesc.includes('fractura')) {
      return {
        severity: 'medium',
        category: 'Trauma/Lesi√≥n',
        firstAid: [
          '1. No muevas a la persona a menos que est√© en peligro inmediato',
          '2. Eval√∫a si est√° consciente y puede mover extremidades',
          '3. Inmoviliza la zona lesionada',
          '4. Aplica hielo envuelto en un pa√±o sobre la zona afectada',
          '5. Mant√©n a la persona calmada y c√≥moda'
        ],
        callAmbulance: true,
        additionalQuestions: [
          '¬øPuede mover los brazos y piernas?',
          '¬øSiente dolor en el cuello o espalda?',
          '¬øPerdi√≥ el conocimiento en alg√∫n momento?'
        ]
      };
    }
    
    // Caso general
    return {
      severity: 'medium',
      category: 'Emergencia General',
      firstAid: [
        '1. Mant√©n la calma y eval√∫a la situaci√≥n',
        '2. Asegura que el √°rea sea segura',
        '3. Verifica si la persona est√° consciente y respirando',
        '4. No muevas a la persona a menos que sea necesario',
        '5. Mantente con la persona hasta que llegue ayuda'
      ],
      callAmbulance: true,
      additionalQuestions: [
        '¬øPuedes describir m√°s detalles sobre lo que pas√≥?',
        '¬øLa persona est√° consciente?',
        '¬øHay alg√∫n sangrado visible?'
      ]
    };
  }

  async askFollowUpQuestion(originalDescription: string, newInfo: string): Promise<EmergencyAnalysis> {
    const combinedDescription = `${originalDescription} ${newInfo}`;
    return this.analyzeEmergency(combinedDescription);
  }
}

export const emergencyAI = new EmergencyAIService();
